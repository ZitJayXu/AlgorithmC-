#include<iostream>
#include<vector>
using namespace std;
struct ListNode{
	struct ListNode* next;
	int val;
};
ListNode* createnode(vector<int>a)//建立单链表并传入数据
{
	ListNode* head = new ListNode();
	ListNode* cur = head;
	for (int i = 0; i < a.size()-1; i++) {
		head->val = a[i];
		head->next = NULL;

		ListNode* p = new ListNode();
		p->val = a[i + 1];
		p->next = NULL;

		head->next = p;
		head = head->next;
	}
	head->next = NULL;
	return cur;
}
void PrintNode(ListNode* list)//打印表单
{
	ListNode* p;
	p = list;
	while(p!=NULL)
	{
		cout << p->val << endl;
		p = p->next;
	}
}
ListNode* mergetwoList(ListNode* arr1, ListNode* arr2)//递归方式合并两个有序链表
{
	if (arr1 == nullptr){
		return arr2;
	}
	if (arr2 == nullptr) {
		return arr1;
	}
	else if (arr1->val <arr2->val){
		 arr1->next=mergetwoList(arr1->next,arr2);
		 return arr1;
	}
	else {
		arr2->next=mergetwoList(arr1,arr2->next);
		return arr2;
	}
}
int main() {//测试用例
	vector<int>list1{ 1,3,4 },list2{ 2,3,6 };
	ListNode* List1;
	List1= createnode(list1);
	ListNode* List2;
	List2= createnode(list2);
	ListNode* ans;
	ans=mergetwoList(List1,List2);
	PrintNode(ans);
	return 0;
	system("pause");
}
